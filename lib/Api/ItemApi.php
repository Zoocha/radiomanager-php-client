<?php
/**
 * ItemApi
 * PHP version 5
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RadioManager\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\RequestOptions;
use RadioManager\ApiException;
use RadioManager\Configuration;
use RadioManager\HeaderSelector;
use RadioManager\ObjectSerializer;

/**
 * ItemApi Class Doc Comment
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createItem
     *
     * Create an new item.
     *
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\PostSuccess
     */
    public function createItem($data = null)
    {
        list($response) = $this->createItemWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation createItemWithHttpInfo
     *
     * Create an new item.
     *
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\PostSuccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function createItemWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\PostSuccess';
        $request = $this->createItemRequest($data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\PostSuccess',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\TooManyRequests',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createItemAsync
     *
     * Create an new item.
     *
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createItemAsync($data = null)
    {
        return $this->createItemAsyncWithHttpInfo($data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createItemAsyncWithHttpInfo
     *
     * Create an new item.
     *
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createItemAsyncWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\PostSuccess';
        $request = $this->createItemRequest($data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createItem'
     *
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createItemRequest($data = null)
    {

        $resourcePath = '/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currentItemPostStructure
     *
     * Post a current playing item, keep structure
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\Success
     */
    public function currentItemPostStructure($data = null)
    {
        list($response) = $this->currentItemPostStructureWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation currentItemPostStructureWithHttpInfo
     *
     * Post a current playing item, keep structure
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function currentItemPostStructureWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->currentItemPostStructureRequest($data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Success',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\TooManyRequests',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currentItemPostStructureAsync
     *
     * Post a current playing item, keep structure
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currentItemPostStructureAsync($data = null)
    {
        return $this->currentItemPostStructureAsyncWithHttpInfo($data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currentItemPostStructureAsyncWithHttpInfo
     *
     * Post a current playing item, keep structure
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currentItemPostStructureAsyncWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->currentItemPostStructureRequest($data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currentItemPostStructure'
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currentItemPostStructureRequest($data = null)
    {

        $resourcePath = '/items/current/structure';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currentItemPostTiming
     *
     * Post a current playing item
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\Success
     */
    public function currentItemPostTiming($data = null)
    {
        list($response) = $this->currentItemPostTimingWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation currentItemPostTimingWithHttpInfo
     *
     * Post a current playing item
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function currentItemPostTimingWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->currentItemPostTimingRequest($data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Success',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\TooManyRequests',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currentItemPostTimingAsync
     *
     * Post a current playing item
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currentItemPostTimingAsync($data = null)
    {
        return $this->currentItemPostTimingAsyncWithHttpInfo($data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currentItemPostTimingAsyncWithHttpInfo
     *
     * Post a current playing item
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currentItemPostTimingAsyncWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->currentItemPostTimingRequest($data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currentItemPostTiming'
     *
     * @param  \RadioManager\Model\ImportItem $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currentItemPostTimingRequest($data = null)
    {

        $resourcePath = '/items/current/timing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteItemById
     *
     * Delete item by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\Success
     */
    public function deleteItemById($id)
    {
        list($response) = $this->deleteItemByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteItemByIdWithHttpInfo
     *
     * Delete item by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteItemByIdWithHttpInfo($id)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->deleteItemByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Success',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteItemByIdAsync
     *
     * Delete item by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteItemByIdAsync($id)
    {
        return $this->deleteItemByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteItemByIdAsyncWithHttpInfo
     *
     * Delete item by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteItemByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->deleteItemByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteItemById'
     *
     * @param  int $id ID of Item **(Required)** (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteItemByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteItemById'
            );
        }
        if ($id < 0) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ItemApi.deleteItemById, must be bigger than or equal to 0.');
        }


        $resourcePath = '/items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCurrentItem
     *
     * Get current Item
     *
     * @param  bool $lastplayed Show last played item if there is no current item*(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\ItemResult
     */
    public function getCurrentItem($lastplayed = null)
    {
        list($response) = $this->getCurrentItemWithHttpInfo($lastplayed);
        return $response;
    }

    /**
     * Operation getCurrentItemWithHttpInfo
     *
     * Get current Item
     *
     * @param  bool $lastplayed Show last played item if there is no current item*(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\ItemResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrentItemWithHttpInfo($lastplayed = null)
    {
        $returnType = '\RadioManager\Model\ItemResult';
        $request = $this->getCurrentItemRequest($lastplayed);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\ItemResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Success',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCurrentItemAsync
     *
     * Get current Item
     *
     * @param  bool $lastplayed Show last played item if there is no current item*(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrentItemAsync($lastplayed = null)
    {
        return $this->getCurrentItemAsyncWithHttpInfo($lastplayed)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCurrentItemAsyncWithHttpInfo
     *
     * Get current Item
     *
     * @param  bool $lastplayed Show last played item if there is no current item*(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrentItemAsyncWithHttpInfo($lastplayed = null)
    {
        $returnType = '\RadioManager\Model\ItemResult';
        $request = $this->getCurrentItemRequest($lastplayed);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCurrentItem'
     *
     * @param  bool $lastplayed Show last played item if there is no current item*(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCurrentItemRequest($lastplayed = null)
    {

        $resourcePath = '/items/current';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lastplayed !== null) {
            $queryParams['lastplayed'] = ObjectSerializer::toQueryValue($lastplayed);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemById
     *
     * Get extended item details by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\ItemResult
     */
    public function getItemById($id, $_external_station_id = null)
    {
        list($response) = $this->getItemByIdWithHttpInfo($id, $_external_station_id);
        return $response;
    }

    /**
     * Operation getItemByIdWithHttpInfo
     *
     * Get extended item details by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\ItemResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemByIdWithHttpInfo($id, $_external_station_id = null)
    {
        $returnType = '\RadioManager\Model\ItemResult';
        $request = $this->getItemByIdRequest($id, $_external_station_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\ItemResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\TooManyRequests',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemByIdAsync
     *
     * Get extended item details by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemByIdAsync($id, $_external_station_id = null)
    {
        return $this->getItemByIdAsyncWithHttpInfo($id, $_external_station_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemByIdAsyncWithHttpInfo
     *
     * Get extended item details by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemByIdAsyncWithHttpInfo($id, $_external_station_id = null)
    {
        $returnType = '\RadioManager\Model\ItemResult';
        $request = $this->getItemByIdRequest($id, $_external_station_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemById'
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getItemByIdRequest($id, $_external_station_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getItemById'
            );
        }
        if ($id < 0) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ItemApi.getItemById, must be bigger than or equal to 0.');
        }


        $resourcePath = '/items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_external_station_id !== null) {
            $queryParams['_external_station_id'] = ObjectSerializer::toQueryValue($_external_station_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listItems
     *
     * Get a list of all the items currently in your station.
     *
     * @param  int $page Current page *(Optional)* (optional)
     * @param  int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $model_type_id Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $campaign_id Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $contact_id Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $program_draft_id Search on Program Draft ID *(Optional)* (optional)
     * @param  int $user_draft_id Search on User Draft ID *(Optional)* (optional)
     * @param  int $station_draft_id Search on Station Draft ID *(Optional)* (optional)
     * @param  int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  string $external_id Search on External ID *(Optional)* (optional)
     * @param  \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param  \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param  int $duration_min Minimum duration (seconds) *(Optional)* (optional)
     * @param  int $duration_max Maximum duration (seconds) *(Optional)* (optional)
     * @param  string $status Play Status of item *(Optional)* (optional)
     * @param  int $limit Results per page *(Optional)* (optional)
     * @param  string $order_by Field to order the results *(Optional)* (optional)
     * @param  string $order_direction Direction of ordering *(Optional)* (optional)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\ItemResults
     */
    public function listItems($page = null, $block_id = null, $broadcast_id = null, $model_type_id = null, $tag_id = null, $campaign_id = null, $contact_id = null, $program_draft_id = null, $user_draft_id = null, $station_draft_id = null, $program_id = null, $external_id = null, $start_min = null, $start_max = null, $duration_min = null, $duration_max = null, $status = null, $limit = null, $order_by = null, $order_direction = null, $_external_station_id = null)
    {
        list($response) = $this->listItemsWithHttpInfo($page, $block_id, $broadcast_id, $model_type_id, $tag_id, $campaign_id, $contact_id, $program_draft_id, $user_draft_id, $station_draft_id, $program_id, $external_id, $start_min, $start_max, $duration_min, $duration_max, $status, $limit, $order_by, $order_direction, $_external_station_id);
        return $response;
    }

    /**
     * Operation listItemsWithHttpInfo
     *
     * Get a list of all the items currently in your station.
     *
     * @param  int $page Current page *(Optional)* (optional)
     * @param  int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $model_type_id Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $campaign_id Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $contact_id Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $program_draft_id Search on Program Draft ID *(Optional)* (optional)
     * @param  int $user_draft_id Search on User Draft ID *(Optional)* (optional)
     * @param  int $station_draft_id Search on Station Draft ID *(Optional)* (optional)
     * @param  int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  string $external_id Search on External ID *(Optional)* (optional)
     * @param  \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param  \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param  int $duration_min Minimum duration (seconds) *(Optional)* (optional)
     * @param  int $duration_max Maximum duration (seconds) *(Optional)* (optional)
     * @param  string $status Play Status of item *(Optional)* (optional)
     * @param  int $limit Results per page *(Optional)* (optional)
     * @param  string $order_by Field to order the results *(Optional)* (optional)
     * @param  string $order_direction Direction of ordering *(Optional)* (optional)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\ItemResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function listItemsWithHttpInfo($page = null, $block_id = null, $broadcast_id = null, $model_type_id = null, $tag_id = null, $campaign_id = null, $contact_id = null, $program_draft_id = null, $user_draft_id = null, $station_draft_id = null, $program_id = null, $external_id = null, $start_min = null, $start_max = null, $duration_min = null, $duration_max = null, $status = null, $limit = null, $order_by = null, $order_direction = null, $_external_station_id = null)
    {
        $returnType = '\RadioManager\Model\ItemResults';
        $request = $this->listItemsRequest($page, $block_id, $broadcast_id, $model_type_id, $tag_id, $campaign_id, $contact_id, $program_draft_id, $user_draft_id, $station_draft_id, $program_id, $external_id, $start_min, $start_max, $duration_min, $duration_max, $status, $limit, $order_by, $order_direction, $_external_station_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\ItemResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\TooManyRequests',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listItemsAsync
     *
     * Get a list of all the items currently in your station.
     *
     * @param  int $page Current page *(Optional)* (optional)
     * @param  int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $model_type_id Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $campaign_id Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $contact_id Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $program_draft_id Search on Program Draft ID *(Optional)* (optional)
     * @param  int $user_draft_id Search on User Draft ID *(Optional)* (optional)
     * @param  int $station_draft_id Search on Station Draft ID *(Optional)* (optional)
     * @param  int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  string $external_id Search on External ID *(Optional)* (optional)
     * @param  \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param  \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param  int $duration_min Minimum duration (seconds) *(Optional)* (optional)
     * @param  int $duration_max Maximum duration (seconds) *(Optional)* (optional)
     * @param  string $status Play Status of item *(Optional)* (optional)
     * @param  int $limit Results per page *(Optional)* (optional)
     * @param  string $order_by Field to order the results *(Optional)* (optional)
     * @param  string $order_direction Direction of ordering *(Optional)* (optional)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemsAsync($page = null, $block_id = null, $broadcast_id = null, $model_type_id = null, $tag_id = null, $campaign_id = null, $contact_id = null, $program_draft_id = null, $user_draft_id = null, $station_draft_id = null, $program_id = null, $external_id = null, $start_min = null, $start_max = null, $duration_min = null, $duration_max = null, $status = null, $limit = null, $order_by = null, $order_direction = null, $_external_station_id = null)
    {
        return $this->listItemsAsyncWithHttpInfo($page, $block_id, $broadcast_id, $model_type_id, $tag_id, $campaign_id, $contact_id, $program_draft_id, $user_draft_id, $station_draft_id, $program_id, $external_id, $start_min, $start_max, $duration_min, $duration_max, $status, $limit, $order_by, $order_direction, $_external_station_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listItemsAsyncWithHttpInfo
     *
     * Get a list of all the items currently in your station.
     *
     * @param  int $page Current page *(Optional)* (optional)
     * @param  int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $model_type_id Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $campaign_id Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $contact_id Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $program_draft_id Search on Program Draft ID *(Optional)* (optional)
     * @param  int $user_draft_id Search on User Draft ID *(Optional)* (optional)
     * @param  int $station_draft_id Search on Station Draft ID *(Optional)* (optional)
     * @param  int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  string $external_id Search on External ID *(Optional)* (optional)
     * @param  \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param  \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param  int $duration_min Minimum duration (seconds) *(Optional)* (optional)
     * @param  int $duration_max Maximum duration (seconds) *(Optional)* (optional)
     * @param  string $status Play Status of item *(Optional)* (optional)
     * @param  int $limit Results per page *(Optional)* (optional)
     * @param  string $order_by Field to order the results *(Optional)* (optional)
     * @param  string $order_direction Direction of ordering *(Optional)* (optional)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemsAsyncWithHttpInfo($page = null, $block_id = null, $broadcast_id = null, $model_type_id = null, $tag_id = null, $campaign_id = null, $contact_id = null, $program_draft_id = null, $user_draft_id = null, $station_draft_id = null, $program_id = null, $external_id = null, $start_min = null, $start_max = null, $duration_min = null, $duration_max = null, $status = null, $limit = null, $order_by = null, $order_direction = null, $_external_station_id = null)
    {
        $returnType = '\RadioManager\Model\ItemResults';
        $request = $this->listItemsRequest($page, $block_id, $broadcast_id, $model_type_id, $tag_id, $campaign_id, $contact_id, $program_draft_id, $user_draft_id, $station_draft_id, $program_id, $external_id, $start_min, $start_max, $duration_min, $duration_max, $status, $limit, $order_by, $order_direction, $_external_station_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listItems'
     *
     * @param  int $page Current page *(Optional)* (optional)
     * @param  int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $model_type_id Search on ModelType ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $campaign_id Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $contact_id Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  int $program_draft_id Search on Program Draft ID *(Optional)* (optional)
     * @param  int $user_draft_id Search on User Draft ID *(Optional)* (optional)
     * @param  int $station_draft_id Search on Station Draft ID *(Optional)* (optional)
     * @param  int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param  string $external_id Search on External ID *(Optional)* (optional)
     * @param  \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param  \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param  int $duration_min Minimum duration (seconds) *(Optional)* (optional)
     * @param  int $duration_max Maximum duration (seconds) *(Optional)* (optional)
     * @param  string $status Play Status of item *(Optional)* (optional)
     * @param  int $limit Results per page *(Optional)* (optional)
     * @param  string $order_by Field to order the results *(Optional)* (optional)
     * @param  string $order_direction Direction of ordering *(Optional)* (optional)
     * @param  int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listItemsRequest($page = null, $block_id = null, $broadcast_id = null, $model_type_id = null, $tag_id = null, $campaign_id = null, $contact_id = null, $program_draft_id = null, $user_draft_id = null, $station_draft_id = null, $program_id = null, $external_id = null, $start_min = null, $start_max = null, $duration_min = null, $duration_max = null, $status = null, $limit = null, $order_by = null, $order_direction = null, $_external_station_id = null)
    {
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ItemApi.listItems, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ItemApi.listItems, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ItemApi.listItems, must be bigger than or equal to 1.');
        }


        $resourcePath = '/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($block_id !== null) {
            $queryParams['block_id'] = ObjectSerializer::toQueryValue($block_id);
        }
        // query params
        if ($broadcast_id !== null) {
            $queryParams['broadcast_id'] = ObjectSerializer::toQueryValue($broadcast_id);
        }
        // query params
        if ($model_type_id !== null) {
            $queryParams['model_type_id'] = ObjectSerializer::toQueryValue($model_type_id);
        }
        // query params
        if ($tag_id !== null) {
            $queryParams['tag_id'] = ObjectSerializer::toQueryValue($tag_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = ObjectSerializer::toQueryValue($campaign_id);
        }
        // query params
        if ($contact_id !== null) {
            $queryParams['contact_id'] = ObjectSerializer::toQueryValue($contact_id);
        }
        // query params
        if ($program_draft_id !== null) {
            $queryParams['program_draft_id'] = ObjectSerializer::toQueryValue($program_draft_id);
        }
        // query params
        if ($user_draft_id !== null) {
            $queryParams['user_draft_id'] = ObjectSerializer::toQueryValue($user_draft_id);
        }
        // query params
        if ($station_draft_id !== null) {
            $queryParams['station_draft_id'] = ObjectSerializer::toQueryValue($station_draft_id);
        }
        // query params
        if ($program_id !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($program_id);
        }
        // query params
        if ($external_id !== null) {
            $queryParams['external_id'] = ObjectSerializer::toQueryValue($external_id);
        }
        // query params
        if ($start_min !== null) {
            $queryParams['start-min'] = ObjectSerializer::toQueryValue($start_min);
        }
        // query params
        if ($start_max !== null) {
            $queryParams['start-max'] = ObjectSerializer::toQueryValue($start_max);
        }
        // query params
        if ($duration_min !== null) {
            $queryParams['duration-min'] = ObjectSerializer::toQueryValue($duration_min);
        }
        // query params
        if ($duration_max !== null) {
            $queryParams['duration-max'] = ObjectSerializer::toQueryValue($duration_max);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order-by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_direction !== null) {
            $queryParams['order-direction'] = ObjectSerializer::toQueryValue($order_direction);
        }
        // query params
        if ($_external_station_id !== null) {
            $queryParams['_external_station_id'] = ObjectSerializer::toQueryValue($_external_station_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playlistPostMerge
     *
     * Post a playlist, do not remove previously imported items
     *
     * @param  \RadioManager\Model\Data2 $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\InlineResponse202
     */
    public function playlistPostMerge($data = null)
    {
        list($response) = $this->playlistPostMergeWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation playlistPostMergeWithHttpInfo
     *
     * Post a playlist, do not remove previously imported items
     *
     * @param  \RadioManager\Model\Data2 $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistPostMergeWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\InlineResponse202';
        $request = $this->playlistPostMergeRequest($data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playlistPostMergeAsync
     *
     * Post a playlist, do not remove previously imported items
     *
     * @param  \RadioManager\Model\Data2 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playlistPostMergeAsync($data = null)
    {
        return $this->playlistPostMergeAsyncWithHttpInfo($data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playlistPostMergeAsyncWithHttpInfo
     *
     * Post a playlist, do not remove previously imported items
     *
     * @param  \RadioManager\Model\Data2 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playlistPostMergeAsyncWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\InlineResponse202';
        $request = $this->playlistPostMergeRequest($data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playlistPostMerge'
     *
     * @param  \RadioManager\Model\Data2 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function playlistPostMergeRequest($data = null)
    {

        $resourcePath = '/items/playlist/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playlistPostStructure
     *
     * Post a playlist, keep current structure
     *
     * @param  \RadioManager\Model\Data1 $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\InlineResponse202
     */
    public function playlistPostStructure($data = null)
    {
        list($response) = $this->playlistPostStructureWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation playlistPostStructureWithHttpInfo
     *
     * Post a playlist, keep current structure
     *
     * @param  \RadioManager\Model\Data1 $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistPostStructureWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\InlineResponse202';
        $request = $this->playlistPostStructureRequest($data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playlistPostStructureAsync
     *
     * Post a playlist, keep current structure
     *
     * @param  \RadioManager\Model\Data1 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playlistPostStructureAsync($data = null)
    {
        return $this->playlistPostStructureAsyncWithHttpInfo($data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playlistPostStructureAsyncWithHttpInfo
     *
     * Post a playlist, keep current structure
     *
     * @param  \RadioManager\Model\Data1 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playlistPostStructureAsyncWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\InlineResponse202';
        $request = $this->playlistPostStructureRequest($data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playlistPostStructure'
     *
     * @param  \RadioManager\Model\Data1 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function playlistPostStructureRequest($data = null)
    {

        $resourcePath = '/items/playlist/structure';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playlistPostTiming
     *
     * Post a playlist
     *
     * @param  \RadioManager\Model\Data $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\InlineResponse202
     */
    public function playlistPostTiming($data = null)
    {
        list($response) = $this->playlistPostTimingWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation playlistPostTimingWithHttpInfo
     *
     * Post a playlist
     *
     * @param  \RadioManager\Model\Data $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistPostTimingWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\InlineResponse202';
        $request = $this->playlistPostTimingRequest($data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playlistPostTimingAsync
     *
     * Post a playlist
     *
     * @param  \RadioManager\Model\Data $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playlistPostTimingAsync($data = null)
    {
        return $this->playlistPostTimingAsyncWithHttpInfo($data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playlistPostTimingAsyncWithHttpInfo
     *
     * Post a playlist
     *
     * @param  \RadioManager\Model\Data $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playlistPostTimingAsyncWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\InlineResponse202';
        $request = $this->playlistPostTimingRequest($data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playlistPostTiming'
     *
     * @param  \RadioManager\Model\Data $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function playlistPostTimingRequest($data = null)
    {

        $resourcePath = '/items/playlist/timing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopCurrentItem
     *
     * Stop an Item
     *
     * @param  \RadioManager\Model\Data3 $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\Success
     */
    public function stopCurrentItem($data = null)
    {
        list($response) = $this->stopCurrentItemWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation stopCurrentItemWithHttpInfo
     *
     * Stop an Item
     *
     * @param  \RadioManager\Model\Data3 $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopCurrentItemWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->stopCurrentItemRequest($data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Success',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\TooManyRequests',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopCurrentItemAsync
     *
     * Stop an Item
     *
     * @param  \RadioManager\Model\Data3 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopCurrentItemAsync($data = null)
    {
        return $this->stopCurrentItemAsyncWithHttpInfo($data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopCurrentItemAsyncWithHttpInfo
     *
     * Stop an Item
     *
     * @param  \RadioManager\Model\Data3 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopCurrentItemAsyncWithHttpInfo($data = null)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->stopCurrentItemRequest($data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopCurrentItem'
     *
     * @param  \RadioManager\Model\Data3 $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stopCurrentItemRequest($data = null)
    {

        $resourcePath = '/items/stopcurrent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateItemById
     *
     * Update extended item details by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RadioManager\Model\Success
     */
    public function updateItemById($id, $data = null)
    {
        list($response) = $this->updateItemByIdWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation updateItemByIdWithHttpInfo
     *
     * Update extended item details by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RadioManager\Model\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemByIdWithHttpInfo($id, $data = null)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->updateItemByIdRequest($id, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Success',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RadioManager\Model\TooManyRequests',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateItemByIdAsync
     *
     * Update extended item details by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemByIdAsync($id, $data = null)
    {
        return $this->updateItemByIdAsyncWithHttpInfo($id, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateItemByIdAsyncWithHttpInfo
     *
     * Update extended item details by ID.
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemByIdAsyncWithHttpInfo($id, $data = null)
    {
        $returnType = '\RadioManager\Model\Success';
        $request = $this->updateItemByIdRequest($id, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateItemById'
     *
     * @param  int $id ID of Item **(Required)** (required)
     * @param  \RadioManager\Model\ItemDataInput $data Data *(Optional)* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateItemByIdRequest($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateItemById'
            );
        }
        if ($id < 0) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ItemApi.updateItemById, must be bigger than or equal to 0.');
        }


        $resourcePath = '/items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
